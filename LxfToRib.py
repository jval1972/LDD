#!/usr/bin/env python

#
# Version 0.1 - Copyright (c) 2019 by 
#
# Updates:
#
# License: MIT License
#

import os
import sys
import re
import unicodedata
import zipfile
import xml.etree.ElementTree as ET


def export_to_rib(lxf_filename):
	"""
	Takes in the lxfml file generated by the user and parses it to identify
	all of the bricks and positions created in the LDD program
	"""
	
	archive = zipfile.ZipFile(lxf_filename, 'r')
	lxfml_file = archive.read('IMAGE100.LXFML')
	trans_xyz =[]
	
	
	ribfile = os.path.splitext(os.path.basename(lxf_filename))[0]
	with open(ribfile + '.rib', 'w') as file_writer:
	
		file_writer.write('WorldBegin\n')
		file_writer.write('\tTranslate 0 0 10\n')
		file_writer.write('\tScale 0.7 0.7 0.7\n')
		file_writer.write('\tRotate -15 1 0 0\n')
		file_writer.write('\tLight \"PxrDomeLight\" \"domeLight\" \"string lightColorMap\" [\"GriffithObservatory.tex\"]\n')
	
		tree = ET.fromstring(lxfml_file)
		lst = tree.findall('Bricks/Brick')
		for item in lst:
			design_id = item.get('designID')
			for subelem in item:
				material_id = subelem.get('materials')
				for sub in subelem:
					transformation = sub.get('transformation')
					
			transformation_array = transformation.split(',')
			trans_xyz = (transformation_array[9], transformation_array[10], transformation_array[11])
			
			file_writer.write('\tTransformBegin\n')
			file_writer.write('\t\tTranslate ' + trans_xyz[0] + ' ' + trans_xyz[1] + ' ' + '-' + trans_xyz[2] + '\n')
			file_writer.write('\t\tRotate 0 1 0 0\n')
			file_writer.write('\t\tRotate 0 0 1 0\n')
			file_writer.write('\t\tRotate 0 0 0 1\n')
			file_writer.write('\t\tScale 1 1 1\n')
			file_writer.write('\t\tBxdf \"PxrSurface\" \"terminal.bxdf\" \"color diffuseColor\" [1 0 0] \"float specularRoughness\" [0.008] \"color specularEdgeColor\" [0.45 0.45 0.45]\n')
			file_writer.write('\t\tAttribute \"identifier\" \"name" [\"'+ design_id +'\"]\n')
			file_writer.write('\t\tReadArchive \"'+ design_id + '.rib\"\n')
			file_writer.write('\tTransformEnd\n\n')
			
		file_writer.write('WorldEnd\n')
	
	file_writer.close()
	return True
	
	
def main():
	lxf_filename = sys.argv[1]
	
	export_to_rib(lxf_filename)
	
	
if __name__ == "__main__":
	main()
